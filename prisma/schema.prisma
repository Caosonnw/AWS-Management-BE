generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Blog {
  blog_id     Int        @id @default(autoincrement())
  employee_id Int
  title       String     @db.VarChar(255)
  content     String     @db.Text
  created_at  DateTime?  @db.DateTime(0)
  images      String?    @db.Text
  Employees   Employees  @relation(fields: [employee_id], references: [employee_id], onDelete: NoAction, onUpdate: NoAction, map: "Blog_ibfk_1")
  Comments    Comments[]

  @@index([employee_id], map: "employee_id")
}

model Chat {
  chat_id     Int        @id @default(autoincrement())
  employee_id Int?
  content     String?    @db.VarChar(255)
  room_id     String?    @db.VarChar(255)
  date_chat   DateTime?  @db.DateTime(0)
  Employees   Employees? @relation(fields: [employee_id], references: [employee_id], onDelete: NoAction, onUpdate: NoAction, map: "Chat_ibfk_1")

  @@index([employee_id], map: "employee_id")
}

model Comments {
  comment_id      Int       @id @default(autoincrement())
  blog_id         Int
  employee_id     Int
  comment_content String    @db.Text
  created_at      DateTime? @db.DateTime(0)
  Blog            Blog      @relation(fields: [blog_id], references: [blog_id], onDelete: Cascade, onUpdate: NoAction, map: "Comments_ibfk_1")
  Employees       Employees @relation(fields: [employee_id], references: [employee_id], onDelete: NoAction, onUpdate: NoAction, map: "Comments_ibfk_2")

  @@index([blog_id], map: "blog_id")
  @@index([employee_id], map: "employee_id")
}

model Employees {
  employee_id                     Int                   @id @default(autoincrement())
  full_name                       String                @db.VarChar(50)
  email                           String                @unique(map: "email") @db.VarChar(100)
  password                        String                @db.VarChar(255)
  phone_number                    String?               @db.VarChar(15)
  avatar                          String?               @db.VarChar(255)
  date_of_birth                   DateTime?             @db.Date
  hire_date                       DateTime?             @db.Date
  salary                          Int?
  role                            String?               @db.VarChar(255)
  refresh_token                   String?               @db.Text
  face_embeddings                 Json?
  Blog                            Blog[]
  Chat                            Chat[]
  Comments                        Comments[]
  Group_Chat_Messages             Group_Chat_Messages[]
  Tasks                           Tasks[]
  Tasks_Tasks_reporterToEmployees Tasks[]               @relation("Tasks_reporterToEmployees")
  Team_Members                    Team_Members[]
  Timesheets                      Timesheets[]
}

model Projects {
  project_id          Int                   @id @default(autoincrement())
  project_name        String                @db.VarChar(100)
  start_date          DateTime              @db.Date
  end_date            DateTime?             @db.Date
  progress            Int?
  Group_Chat_Messages Group_Chat_Messages[]
  Tasks               Tasks[]
  Team_Members        Team_Members[]
}

model Tasks {
  task_id                             Int        @id @default(autoincrement())
  task_name                           String     @db.VarChar(255)
  description                         String?    @db.Text
  assigned_to                         Int?
  status                              String     @db.VarChar(20)
  priority                            String?    @db.VarChar(20)
  project_id                          Int?
  reporter                            Int?
  status_task                         String?    @db.VarChar(20)
  updated                             DateTime?  @db.DateTime(0)
  created                             DateTime?  @db.DateTime(0)
  Employees                           Employees? @relation(fields: [assigned_to], references: [employee_id], onDelete: NoAction, onUpdate: NoAction, map: "Tasks_ibfk_1")
  Projects                            Projects?  @relation(fields: [project_id], references: [project_id], onDelete: NoAction, onUpdate: NoAction, map: "Tasks_ibfk_2")
  Employees_Tasks_reporterToEmployees Employees? @relation("Tasks_reporterToEmployees", fields: [reporter], references: [employee_id], onDelete: NoAction, onUpdate: NoAction, map: "Tasks_ibfk_3")

  @@index([assigned_to], map: "assigned_to")
  @@index([project_id], map: "project_id")
  @@index([reporter], map: "reporter")
}

model Team_Members {
  team_member_id   Int       @id @default(autoincrement())
  project_id       Int
  employee_id      Int
  is_in_group_chat Boolean?  @default(true)
  Projects         Projects  @relation(fields: [project_id], references: [project_id], onDelete: Cascade, onUpdate: NoAction, map: "Team_Members_ibfk_1")
  Employees        Employees @relation(fields: [employee_id], references: [employee_id], onDelete: Cascade, onUpdate: NoAction, map: "Team_Members_ibfk_2")

  @@index([employee_id], map: "employee_id")
  @@index([project_id], map: "project_id")
}

model Timesheets {
  timesheet_id     Int        @id @default(autoincrement())
  employee_id      Int?
  date_timekeeping DateTime?  @db.Date
  clock_in         String?    @db.VarChar(100)
  clock_out        String?    @db.VarChar(100)
  hours_worked     String     @db.VarChar(100)
  Employees        Employees? @relation(fields: [employee_id], references: [employee_id], onDelete: NoAction, onUpdate: NoAction, map: "Timesheets_ibfk_1")

  @@index([employee_id], map: "employee_id")
}

model Group_Chat_Messages {
  message_id Int       @id @default(autoincrement())
  group_id   Int
  sender_id  Int
  content    String    @db.Text
  sent_at    DateTime? @default(now()) @db.DateTime(0)
  Projects   Projects  @relation(fields: [group_id], references: [project_id], onDelete: Cascade, onUpdate: NoAction, map: "Group_Chat_Messages_ibfk_1")
  Employees  Employees @relation(fields: [sender_id], references: [employee_id], onDelete: Cascade, onUpdate: NoAction, map: "Group_Chat_Messages_ibfk_2")

  @@index([group_id], map: "group_id")
  @@index([sender_id], map: "sender_id")
}
